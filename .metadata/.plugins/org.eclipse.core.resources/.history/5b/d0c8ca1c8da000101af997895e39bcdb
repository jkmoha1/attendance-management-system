/*package com.parabank.pages;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class BillPayPage extends BasePage {
    @FindBy(name="payee.name") private WebElement payeeName;
    @FindBy(name="payee.address.street") private WebElement payeeAddress;
    @FindBy(name="payee.address.city") private WebElement payeeCity;
    @FindBy(name="payee.address.state") private WebElement payeeState;
    @FindBy(name="payee.address.zipCode") private WebElement payeeZip;
    @FindBy(name="payee.phoneNumber") private WebElement payeePhone;
    @FindBy(name="payee.accountNumber") private WebElement payeeAccount;
    @FindBy(name="verifyAccount") private WebElement payeeVerify;
    @FindBy(name="amount") private WebElement amount;
    @FindBy(css="input[value='Send Payment']") private WebElement sendPayment;
    @FindBy(css="#rightPanel .title") private WebElement confirmationTitle;
    @FindBy(css="#rightPanel .error") private WebElement errorPanel;
    @FindBy(css="#rightPanel") private WebElement rightPanel;
    
    public BillPayPage(WebDriver driver){ super(driver); PageFactory.initElements(driver,this);}    

    public void fillPayee(String n,String a,String c,String s,String z,String p,String acc,String amt){
        type(payeeName,n); type(payeeAddress,a); type(payeeCity,c); type(payeeState,s); type(payeeZip,z);
        type(payeePhone,p); type(payeeAccount,acc); type(payeeVerify,acc); type(amount,amt);
    }
    public void submit(){ click(sendPayment);}    
    public String getConfirmation(){ return getText(confirmationTitle);}    
    public boolean hasValidationError(){ try { return errorPanel.isDisplayed(); } catch(Exception e){ return false; } }
    
    public String getFromAccountTextSafe() {
        try {
            Select s = new Select(driver.findElement(By.id("fromAccountId")));
            return s.getFirstSelectedOption().getText().trim();
        } catch (Exception e1) {
            try {
                Select s = new Select(driver.findElement(By.name("fromAccountId")));
                return s.getFirstSelectedOption().getText().trim();
            } catch (Exception e2) {
                return "";
            }
        }
    }
    public void clearAll() {
    	try {
    	payeeName.clear(); payeeAddress.clear(); payeeCity.clear(); payeeState.clear();
    	payeeZip.clear(); payeePhone.clear(); payeeAccount.clear(); payeeVerify.clear(); amount.clear();
    	} catch (Exception ignored) {}
    	}


    	public String getErrorTextSafe() { try { return getText(errorPanel);} catch(Exception e){ return ""; } }


    	public String getRightPanelText() { try { return getText(rightPanel);} catch(Exception e){ return ""; } }
    	
    	  // ðŸ”¹ New helper to check if confirmation contains payee name
        public boolean confirmationContainsPayee(String payee) {
            try {
                WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
                WebElement details = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    By.xpath("//*[@id='rightPanel']//*[contains(normalize-space(),'Bill Payment to')]")
                ));
                return details.getText().toLowerCase().contains(payee.toLowerCase());
            } catch (Exception e) {
                return false;
            }
            
        }
        public String dumpConfirmationText() {
            try { return getRightPanelText(); } catch (Exception e) { return "(failed to read #rightPanel)"; }
        }
}*/
package com.parabank.pages;

import java.time.Duration;
import java.util.NoSuchElementException;

import org.openqa.selenium.By;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

public class BillPayPage extends BasePage {
    @FindBy(name="payee.name") private WebElement payeeName;
    @FindBy(name="payee.address.street") private WebElement payeeAddress;
    @FindBy(name="payee.address.city") private WebElement payeeCity;
    @FindBy(name="payee.address.state") private WebElement payeeState;
    @FindBy(name="payee.address.zipCode") private WebElement payeeZip;
    @FindBy(name="payee.phoneNumber") private WebElement payeePhone;
    @FindBy(name="payee.accountNumber") private WebElement payeeAccount;
    @FindBy(name="verifyAccount") private WebElement payeeVerify;
    @FindBy(name="amount") private WebElement amount;
    @FindBy(css="input[value='Send Payment']") private WebElement sendPayment;
    @FindBy(css="#rightPanel .title") private WebElement confirmationTitle;
    @FindBy(css="#rightPanel .error") private WebElement errorPanel;
    @FindBy(css="#rightPanel") private WebElement rightPanel;
    @FindBy(id="fromAccountId") private WebElement fromAccountSelect;

    public BillPayPage(WebDriver driver){
        super(driver);
        PageFactory.initElements(driver,this);
    }

    public void fillPayee(String n,String a,String c,String s,String z,String p,String acc,String amt){
        type(payeeName,n);
        type(payeeAddress,a);
        type(payeeCity,c);
        type(payeeState,s);
        type(payeeZip,z);
        type(payeePhone,p);
        type(payeeAccount,acc);
        type(payeeVerify,acc);
        type(amount,amt);
    }

    /**
     * Select a from-account by visible text. Throws runtime on failure so test fails loudly if selection not possible.
     */
    public void selectFromAccountByVisibleText(String visibleText) {
        try {
            // prefer the located element (PageFactory) to avoid stale lookup unless null
            WebElement sel = fromAccountSelect;
            if (sel == null) {
                sel = driver.findElement(By.id("fromAccountId"));
            }
            new Select(sel).selectByVisibleText(visibleText);
        } catch (Exception e) {
            throw new RuntimeException("Failed to select from-account by visible text: " + visibleText, e);
        }
    }

    public void submit() { click(sendPayment); }

    /**
     * Click send and wait for either a confirmation title, an error panel, or a change in the rightPanel.
     * Uses the configured explicit wait from BasePage.
     */
    public void submitAndWaitForResult() {
        // close any stray popups before submitting
        closePopupsIfAny();
        click(sendPayment);

        try {
            wait.until(ExpectedConditions.or(
                ExpectedConditions.visibilityOf(confirmationTitle),
                ExpectedConditions.visibilityOf(errorPanel),
                ExpectedConditions.visibilityOf(rightPanel)
            ));
        } catch (Exception ignored) {
            // swallow, callers can inspect page state with getters
        }
    }

    public String getConfirmation() {
        try {
            waitForVisible(confirmationTitle);
            return getText(confirmationTitle).trim();
        } catch (Exception e) {
            return "";
        }
    }

    public boolean hasValidationError(){
        try { return errorPanel.isDisplayed(); } catch (Exception e) { return false; }
    }

    public String getFromAccountTextSafe() {
        try {
            // try id first, then name
            try {
                Select s = new Select(driver.findElement(By.id("fromAccountId")));
                return s.getFirstSelectedOption().getText().trim();
            } catch (Exception e1) {
                Select s = new Select(driver.findElement(By.name("fromAccountId")));
                return s.getFirstSelectedOption().getText().trim();
            }
        } catch (Exception e) {
            return "";
        }
    }

    public void clearAll() {
        try {
            payeeName.clear(); payeeAddress.clear(); payeeCity.clear(); payeeState.clear();
            payeeZip.clear(); payeePhone.clear(); payeeAccount.clear(); payeeVerify.clear(); amount.clear();
        } catch (Exception ignored) {}
    }

    public String getErrorTextSafe() {
        try {
            // small visible wait to let validation messages appear
            if (visibleInTime(By.cssSelector("#rightPanel .error"), 3)) {
                return getText(errorPanel).trim();
            }
            return "";
        } catch (Exception e) {
            return "";
        }
    }

    public String getRightPanelText() {
        try {
            // ensure right panel is visible (uses BasePage.wait)
            waitForVisible(rightPanel);
            String txt = getText(rightPanel);
            return txt == null ? "" : txt.trim();
        } catch (Exception e) {
            return "";
        }
    }

    /**
     * Wait until a substring appears in the right panel. Case-insensitive.
     * Uses a polling lambda driven by the BasePage wait instance.
     */
    public boolean waitForConfirmationContains(String substring, Duration timeout) {
        try {
            long seconds = Math.max(1, timeout.toSeconds());
            // quick custom wait using a temporary WebDriverWait so we can pass a custom timeout
            new org.openqa.selenium.support.ui.WebDriverWait(driver, java.time.Duration.ofSeconds(seconds))
                .until(d -> {
                    try {
                        String t = getRightPanelText();
                        return t != null && t.toLowerCase().contains(substring.toLowerCase());
                    } catch (StaleElementReferenceException | NoSuchElementException ex) {
                        return false;
                    }
                });
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    // Improved helper that uses waitForConfirmationContains
    public boolean confirmationContainsPayee(String payee) {
        return waitForConfirmationContains(payee, Duration.ofSeconds(10));
    }

    public String dumpConfirmationText() {
        try { return getRightPanelText(); } catch (Exception e) { return "(failed to read #rightPanel)"; }
    }
}

