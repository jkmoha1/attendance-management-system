package com.parabank.tests;

import com.parabank.data.TestDataProvider;
import com.parabank.pages.*;
import com.parabank.utils.ConfigReader;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;
import org.testng.Assert;
import org.testng.annotations.Test;

public class BillPayTests extends BaseTest {

	@Test(priority = 1, dataProvider = "billPayData", dataProviderClass = TestDataProvider.class)
	public void billPayScenarios(String username, String password, String name, String address, String city,
			String state, String zip, String phone, String account, String amount, String expected) {

		AccountsOverviewPage overview = new LoginPage(driver).login(username, password);
		BillPayPage bill = overview.goToBillPay();

		bill.fillPayee(name, address, city, state, zip, phone, account, amount);
		bill.submit();

		String conf = "";
		for (int i = 0; i < 8 && (conf == null || conf.isBlank()); i++) {
			conf = bill.getConfirmation();
			sleep(250);
		}
		String lc = conf == null ? "" : conf.toLowerCase();

		if ("success".equalsIgnoreCase(expected)) {
			Assert.assertTrue(lc.contains("complete") || conf.length() > 0, "Expected payment success");
		} else if ("validation".equalsIgnoreCase(expected)) {
			Assert.assertFalse(lc.contains("complete"), "Expected validation error");
		} else {
			Assert.fail("Unknown expected: " + expected);
		}
		overview.logout();
	}

	@Test(priority = 2, dataProvider = "findTransactionsData", dataProviderClass = TestDataProvider.class)
	public void paymentHistory(String username, String password, String amount) {
		AccountsOverviewPage overview = new LoginPage(driver).login(username, password);

		// Create a payment first so thereâ€™s something to find
		BillPayPage bill = overview.goToBillPay();
		bill.fillPayee("Acme Utilities", "1 Utility Ave", "Metropolis", "CA", "90210",
				"5551234567", "123456", amount);
		bill.submit();
		for (int i = 0; i < 8; i++) {
			if (bill.getConfirmation() != null && !bill.getConfirmation().isBlank()) break;
			sleep(250);
		}
		String fromAcc = bill.getFromAccountTextSafe();
		String digits = fromAcc.replaceAll("\\D", "");



		FindTransactionsPage find = overview.goToFindTransactions();
		try {
			WebElement dd = driver.findElement(By.id("accountId"));
			Select s = new Select(dd);
			try {
				s.selectByVisibleText(fromAcc);
			} catch (Exception e) {
				boolean matched = false;
				for (WebElement opt : s.getOptions()) {
					if (opt.getText().contains(digits)) { 
						opt.click(); matched = true; break; 
					}
				}
				if (!matched) s.selectByIndex(0);
			}
		} catch (Exception ignored) { }

		boolean found = false;
		for (int i = 0; i < 4 && !found; i++) {
			find.searchByAmount(amount);
			found = find.hasResults();
			sleep(600);
		}
		Assert.assertTrue(found, "No transactions found for amount " + amount);
		overview.logout();
	}

	@Test(priority = 3, description = "Bill Pay validation: required fields")
	public void billPayRequiredFieldValidation() {
	    AccountsOverviewPage overview = new LoginPage(driver).login(
	            ConfigReader.get("default.username"), ConfigReader.get("default.password"));
	    BillPayPage bill = overview.goToBillPay();

	    bill.clearAll();
	    bill.submit();

	    String err = bill.getErrorTextSafe().toLowerCase();
	    Assert.assertTrue(err.length() > 0 || driver.getPageSource().toLowerCase().contains("required"),
	            "Expected a validation error when submitting blank bill pay.");
	    overview.logout();
	}

	@Test(priority = 4, description = "Bill Pay invalid amount is rejected")
	public void billPayInvalidAmount() {
	    AccountsOverviewPage overview = new LoginPage(driver).login(
	            ConfigReader.get("default.username"), ConfigReader.get("default.password"));
	    BillPayPage bill = overview.goToBillPay();

	    bill.fillPayee("Acme Utilities", "1 Utility Ave", "Metropolis", "CA", "90210", "5551234567", "123456", "abc"); // invalid amount
	    bill.submit();

	    String err = bill.getErrorTextSafe().toLowerCase();
	    Assert.assertTrue(err.length() > 0 || driver.getPageSource().toLowerCase().contains("amount"),
	            "Expected amount validation error.");
	    overview.logout();
	}

	/*@Test(priority = 5, description = "Bill Pay confirmation includes payee name when successful")
	public void billPayConfirmationIncludesPayeeName() {
	    String payee = "Metro Water " + System.currentTimeMillis();

	    AccountsOverviewPage overview = new LoginPage(driver).login(
	            ConfigReader.get("default.username"), ConfigReader.get("default.password"));
	    BillPayPage bill = overview.goToBillPay();

	    // Use a small positive amount
	    bill.fillPayee(payee, "1 Utility Ave", "Metropolis", "CA", "90210", "5551234567", "123456", "12");
	    bill.submit();

	    String panel = "";
	    for (int i = 0; i < 8 && (panel == null || panel.isBlank()); i++) { panel = bill.getRightPanelText();  }
	    Assert.assertTrue(panel.toLowerCase().contains(payee.toLowerCase()) || panel.toLowerCase().contains("complete"),
	            "Expected bill pay confirmation containing payee name or complete message. Panel: " + panel);
	    overview.logout();
	}
	
	/*@Test(priority = 5, description = "Bill Pay confirmation includes payee name when successful")
	public void billPayConfirmationIncludesPayeeName() {
	    String payee = "Metro Water " + System.currentTimeMillis();

	    AccountsOverviewPage overview = new LoginPage(driver).login(
	            ConfigReader.get("default.username"), ConfigReader.get("default.password"));
	    BillPayPage bill = overview.goToBillPay();

	    // Use a small positive amount
	    bill.fillPayee(payee, "1 Utility Ave", "Metropolis", "CA", "90210", "5551234567", "123456", "12");
	    bill.submit();

	    // Wait up to a reasonable time for either a confirmation or validation error
	    boolean sawConfirmation = bill.confirmationContainsPayee(payee);
	    String panelText = bill.dumpConfirmationText();
	    String errorText = bill.getErrorTextSafe();

	    // If there's an error, fail with helpful diagnostics
	    if (!errorText.isBlank()) {
	        Assert.fail("Bill pay produced a validation error: " + errorText + "\nPanel:\n" + panelText);
	    }

	    // Otherwise assert confirmation contains payee or a 'complete' style message
	    Assert.assertTrue(
	        sawConfirmation || panelText.toLowerCase().contains(payee.toLowerCase()) || panelText.toLowerCase().contains("complete"),
	        "Expected bill pay confirmation containing payee name or complete message. Panel: " + panelText
	    );

	    overview.logout();
	}*/
	/*@Test(priority = 5, description = "Bill Pay confirmation includes payee name when successful")
	public void billPayConfirmationIncludesPayeeName() {
	    String payee = "Metro Water " + System.currentTimeMillis();

	    AccountsOverviewPage overview = new LoginPage(driver).login(
	            ConfigReader.get("default.username"), ConfigReader.get("default.password"));
	    BillPayPage bill = overview.goToBillPay();

	    // Fill fields (use 2-decimal amount)
	    bill.fillPayee(payee, "1 Utility Ave", "Metropolis", "CA", "90210", "5551234567", "123456", "12.00");

	    // Ensure a from-account is selected (defense)
	    bill.selectFromAccountByVisibleTextOrIndex(null, 0);

	    // close popups if any
	    bill.closePopupsIfAny();

	    // Submit (normal submit tries click then actions fallback)
	    bill.submit();

	    // Wait explicitly for a confirmation that contains either "Complete" or the payee
	    String panel = bill.waitForConfirmationPanel(15, payee.toLowerCase());

	    // If we timed out waiting, collect helpful diagnostics
	    if (panel == null || panel.isBlank()) {
	        String panelTextNow = bill.getRightPanelText();
	        String panelHtml = bill.dumpRightPanelHtmlSafe();
	        String errorText = bill.getErrorTextSafe();
	        System.out.println("=== DIAGNOSTICS: rightPanel text ===\n" + panelTextNow);
	        System.out.println("=== DIAGNOSTICS: rightPanel html ===\n" + panelHtml);
	        System.out.println("=== DIAGNOSTICS: errorText ===\n" + errorText);
	        Assert.fail("Timed out waiting for confirmation panel. Current panel text: " + panelTextNow + " | error: " + errorText);
	    }

	    // Final assertion: either the panel contains the payee or contains 'complete'
	    String panelLower = panel.toLowerCase();
	    Assert.assertTrue(panelLower.contains(payee.toLowerCase()) || panelLower.contains("complete"),
	            "Expected bill pay confirmation containing payee name or complete message. Panel: " + panel);

	    overview.logout();
	}*/
	
	@Test(priority = 5, description = "Bill Pay confirmation includes payee name when successful")
	public void billPayConfirmationIncludesPayeeName() {
	    String payee = "Metro Water " + System.currentTimeMillis();

	    AccountsOverviewPage overview = new LoginPage(driver).login(
	            ConfigReader.get("default.username"), ConfigReader.get("default.password"));
	    BillPayPage bill = overview.goToBillPay();

	    // Fill fields (use 2-decimal amount)
	    bill.fillPayee(payee, "1 Utility Ave", "Metropolis", "CA", "90210",
	                   "5551234567", "123456", "12.00");

	    // Ensure a from-account is selected
	    bill.selectFromAccountByVisibleTextOrIndex(null, 0);

	    // Close any popups (wrapper delegates to BasePage)
	    bill.closePopups();

	    // Submit payment
	    bill.submit();

	    // Wait for confirmation
	    String panel = bill.waitForConfirmationPanel(15, payee.toLowerCase());

	    if (panel == null || panel.isBlank()) {
	        String errorText = bill.getErrorTextSafe();
	        Assert.fail("Did not find confirmation. Error panel text: " + errorText);
	    }

	    // Assert confirmation contains payee or "complete"
	    String panelLower = panel.toLowerCase();
	    Assert.assertTrue(
	        panelLower.contains(payee.toLowerCase()) || panelLower.contains("complete"),
	        "Expected confirmation containing payee or 'complete'. Panel: " + panel
	    );

	    overview.logout();
	}

	private static void sleep(long ms) { try { Thread.sleep(ms); } catch (InterruptedException ignored) {} }
}
