/*package com.parabank.pages;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class BillPayPage extends BasePage {
    @FindBy(name="payee.name") private WebElement payeeName;
    @FindBy(name="payee.address.street") private WebElement payeeAddress;
    @FindBy(name="payee.address.city") private WebElement payeeCity;
    @FindBy(name="payee.address.state") private WebElement payeeState;
    @FindBy(name="payee.address.zipCode") private WebElement payeeZip;
    @FindBy(name="payee.phoneNumber") private WebElement payeePhone;
    @FindBy(name="payee.accountNumber") private WebElement payeeAccount;
    @FindBy(name="verifyAccount") private WebElement payeeVerify;
    @FindBy(name="amount") private WebElement amount;
    @FindBy(css="input[value='Send Payment']") private WebElement sendPayment;
    @FindBy(css="#rightPanel .title") private WebElement confirmationTitle;
    @FindBy(css="#rightPanel .error") private WebElement errorPanel;
    @FindBy(css="#rightPanel") private WebElement rightPanel;
    
    public BillPayPage(WebDriver driver){ super(driver); PageFactory.initElements(driver,this);}    

    public void fillPayee(String n,String a,String c,String s,String z,String p,String acc,String amt){
        type(payeeName,n); type(payeeAddress,a); type(payeeCity,c); type(payeeState,s); type(payeeZip,z);
        type(payeePhone,p); type(payeeAccount,acc); type(payeeVerify,acc); type(amount,amt);
    }
    public void submit(){ click(sendPayment);}    
    public String getConfirmation(){ return getText(confirmationTitle);}    
    public boolean hasValidationError(){ try { return errorPanel.isDisplayed(); } catch(Exception e){ return false; } }
    
    public String getFromAccountTextSafe() {
        try {
            Select s = new Select(driver.findElement(By.id("fromAccountId")));
            return s.getFirstSelectedOption().getText().trim();
        } catch (Exception e1) {
            try {
                Select s = new Select(driver.findElement(By.name("fromAccountId")));
                return s.getFirstSelectedOption().getText().trim();
            } catch (Exception e2) {
                return "";
            }
        }
    }
    public void clearAll() {
    	try {
    	payeeName.clear(); payeeAddress.clear(); payeeCity.clear(); payeeState.clear();
    	payeeZip.clear(); payeePhone.clear(); payeeAccount.clear(); payeeVerify.clear(); amount.clear();
    	} catch (Exception ignored) {}
    	}


    	public String getErrorTextSafe() { try { return getText(errorPanel);} catch(Exception e){ return ""; } }


    	public String getRightPanelText() { try { return getText(rightPanel);} catch(Exception e){ return ""; } }
    	
    	  // ðŸ”¹ New helper to check if confirmation contains payee name
        public boolean confirmationContainsPayee(String payee) {
            try {
                WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
                WebElement details = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    By.xpath("//*[@id='rightPanel']//*[contains(normalize-space(),'Bill Payment to')]")
                ));
                return details.getText().toLowerCase().contains(payee.toLowerCase());
            } catch (Exception e) {
                return false;
            }
            
        }
        public String dumpConfirmationText() {
            try { return getRightPanelText(); } catch (Exception e) { return "(failed to read #rightPanel)"; }
        }
}*/

package com.parabank.pages;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.Keys;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class BillPayPage extends BasePage {
    @FindBy(name="payee.name") private WebElement payeeName;
    @FindBy(name="payee.address.street") private WebElement payeeAddress;
    @FindBy(name="payee.address.city") private WebElement payeeCity;
    @FindBy(name="payee.address.state") private WebElement payeeState;
    @FindBy(name="payee.address.zipCode") private WebElement payeeZip;
    @FindBy(name="payee.phoneNumber") private WebElement payeePhone;
    @FindBy(name="payee.accountNumber") private WebElement payeeAccount;
    @FindBy(name="verifyAccount") private WebElement payeeVerify;
    @FindBy(name="amount") private WebElement amount;
    @FindBy(css="input[value='Send Payment']") private WebElement sendPayment;
    @FindBy(css="#rightPanel .title") private WebElement confirmationTitle;
    @FindBy(css="#rightPanel .error") private WebElement errorPanel;
    // don't cache #rightPanel
    // @FindBy(css="#rightPanel") private WebElement rightPanel;

    public BillPayPage(WebDriver driver){
        super(driver);
        PageFactory.initElements(driver,this);
    }

    public void fillPayee(String n,String a,String c,String s,String z,String p,String acc,String amt){
        type(payeeName,n); type(payeeAddress,a); type(payeeCity,c); type(payeeState,s); type(payeeZip,z);
        type(payeePhone,p); type(payeeAccount,acc); type(payeeVerify,acc); type(amount,amt);
    }

    /** Normal submit using click but with a wait for clickable */
    public void submit() {
        try {
            WebDriverWait w = new WebDriverWait(driver, Duration.ofSeconds(10));
            w.until(ExpectedConditions.elementToBeClickable(sendPayment));
            sendPayment.click();
        } catch (Exception e) {
            // best-effort: try actions click as fallback
            submitUsingActions();
        }
    }

    /** Alternative submit: user-like action click (no JS) */
    public void submitUsingActions() {
        try {
            Actions actions = new Actions(driver);
            actions.moveToElement(sendPayment).pause(Duration.ofMillis(100)).click().perform();
        } catch (Exception e) {
            // last resort: focus and send ENTER key
            submitUsingEnter();
        }
    }

    /** Final non-JS fallback: send ENTER while focused on button */
    public void submitUsingEnter() {
        try {
            sendPayment.sendKeys(Keys.ENTER);
        } catch (Exception ignored) {}
    }

    public String getConfirmation(){
        try { return getText(confirmationTitle); } catch (Exception e) { return ""; }
    }

    public boolean hasValidationError(){ try { return errorPanel.isDisplayed(); } catch(Exception e){ return false; } }

    public String getFromAccountTextSafe() {
        try {
            Select s = new Select(driver.findElement(By.id("fromAccountId")));
            return s.getFirstSelectedOption().getText().trim();
        } catch (Exception e1) {
            try {
                Select s = new Select(driver.findElement(By.name("fromAccountId")));
                return s.getFirstSelectedOption().getText().trim();
            } catch (Exception e2) {
                return "";
            }
        }
    }

    public void clearAll() {
        try {
            payeeName.clear(); payeeAddress.clear(); payeeCity.clear(); payeeState.clear();
            payeeZip.clear(); payeePhone.clear(); payeeAccount.clear(); payeeVerify.clear(); amount.clear();
        } catch (Exception ignored) {}
    }

    public String getErrorTextSafe() { try { return getText(errorPanel);} catch(Exception e){ return ""; } }

    /** Read #rightPanel text at time-of-call */
    public String getRightPanelText() {
        try {
            WebElement rp = driver.findElement(By.cssSelector("#rightPanel"));
            return rp.getText();
        } catch (Exception e) {
            return "";
        }
    }

    /** Wait for the confirmation panel to contain "Bill Payment Complete" (non-JS) */
    public String waitForConfirmationPanel(int seconds) {
        try {
            WebDriverWait localWait = new WebDriverWait(driver, Duration.ofSeconds(seconds));
            // wait for the panel to be visible
            WebElement panel = localWait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector("#rightPanel")));
            // then wait until its text contains the expected heading
            localWait.until(ExpectedConditions.textToBePresentInElementLocated(By.cssSelector("#rightPanel .title"), "Bill Payment Complete"));
            return panel.getText();
        } catch (TimeoutException te) {
            return "";
        } catch (Exception e) {
            return "";
        }
    }

    public void selectFromAccountByVisibleTextOrIndex(String visibleText, Integer index) {
        try {
            WebElement selectEl = driver.findElement(By.id("fromAccountId"));
            Select sel = new Select(selectEl);
            if (visibleText != null && !visibleText.isBlank()) {
                sel.selectByVisibleText(visibleText);
            } else if (index != null) {
                sel.selectByIndex(index);
            }
        } catch (NoSuchElementException e1) {
            try {
                WebElement selectEl = driver.findElement(By.name("fromAccountId"));
                Select sel = new Select(selectEl);
                if (visibleText != null && !visibleText.isBlank()) {
                    sel.selectByVisibleText(visibleText);
                } else if (index != null) {
                    sel.selectByIndex(index);
                }
            } catch (Exception ignored) {}
        } catch (Exception ignored) {}
    }

    /**
     * Wait up to `seconds` for either a confirmation title to appear or an error panel to appear.
     * Returns "confirmation", "error", or "timeout".
     */
    public String waitForConfirmationOrError(int seconds) {
        WebDriverWait localWait = new WebDriverWait(driver, Duration.ofSeconds(seconds));
        try {
            localWait.until(d -> {
                try {
                    boolean conf = d.findElements(By.cssSelector("#rightPanel .title")).stream()
                            .anyMatch(WebElement::isDisplayed);
                    boolean err = d.findElements(By.cssSelector("#rightPanel .error")).stream()
                            .anyMatch(WebElement::isDisplayed);
                    return conf || err;
                } catch (StaleElementReferenceException se) {
                    return false;
                }
            });

            if (!driver.findElements(By.cssSelector("#rightPanel .title")).isEmpty()
                    && driver.findElement(By.cssSelector("#rightPanel .title")).isDisplayed()) {
                return "confirmation";
            }
            if (!driver.findElements(By.cssSelector("#rightPanel .error")).isEmpty()
                    && driver.findElement(By.cssSelector("#rightPanel .error")).isDisplayed()) {
                return "error";
            }
            return "timeout";
        } catch (TimeoutException te) {
            return "timeout";
        } catch (Exception e) {
            return "timeout";
        }
    }

    // ðŸ”¹ helper to check if confirmation contains payee name
    public boolean confirmationContainsPayee(String payee) {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            WebElement details = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.xpath("//*[@id='rightPanel']//*[contains(normalize-space(),'Bill Payment to')]")
            ));
            return details.getText().toLowerCase().contains(payee.toLowerCase());
        } catch (Exception e) {
            return false;
        }
    }

    public String dumpConfirmationText() {
        try { return getRightPanelText(); } catch (Exception e) { return "(failed to read #rightPanel)"; }
    }
}

