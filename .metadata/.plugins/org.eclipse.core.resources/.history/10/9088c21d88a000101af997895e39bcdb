/*package com.parabank.pages;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class BillPayPage extends BasePage {
    @FindBy(name="payee.name") private WebElement payeeName;
    @FindBy(name="payee.address.street") private WebElement payeeAddress;
    @FindBy(name="payee.address.city") private WebElement payeeCity;
    @FindBy(name="payee.address.state") private WebElement payeeState;
    @FindBy(name="payee.address.zipCode") private WebElement payeeZip;
    @FindBy(name="payee.phoneNumber") private WebElement payeePhone;
    @FindBy(name="payee.accountNumber") private WebElement payeeAccount;
    @FindBy(name="verifyAccount") private WebElement payeeVerify;
    @FindBy(name="amount") private WebElement amount;
    @FindBy(css="input[value='Send Payment']") private WebElement sendPayment;
    @FindBy(css="#rightPanel .title") private WebElement confirmationTitle;
    @FindBy(css="#rightPanel .error") private WebElement errorPanel;
    @FindBy(css="#rightPanel") private WebElement rightPanel;
    
    public BillPayPage(WebDriver driver){ super(driver); PageFactory.initElements(driver,this);}    

    public void fillPayee(String n,String a,String c,String s,String z,String p,String acc,String amt){
        type(payeeName,n); type(payeeAddress,a); type(payeeCity,c); type(payeeState,s); type(payeeZip,z);
        type(payeePhone,p); type(payeeAccount,acc); type(payeeVerify,acc); type(amount,amt);
    }
    public void submit(){ click(sendPayment);}    
    public String getConfirmation(){ return getText(confirmationTitle);}    
    public boolean hasValidationError(){ try { return errorPanel.isDisplayed(); } catch(Exception e){ return false; } }
    
    public String getFromAccountTextSafe() {
        try {
            Select s = new Select(driver.findElement(By.id("fromAccountId")));
            return s.getFirstSelectedOption().getText().trim();
        } catch (Exception e1) {
            try {
                Select s = new Select(driver.findElement(By.name("fromAccountId")));
                return s.getFirstSelectedOption().getText().trim();
            } catch (Exception e2) {
                return "";
            }
        }
    }
    public void clearAll() {
    	try {
    	payeeName.clear(); payeeAddress.clear(); payeeCity.clear(); payeeState.clear();
    	payeeZip.clear(); payeePhone.clear(); payeeAccount.clear(); payeeVerify.clear(); amount.clear();
    	} catch (Exception ignored) {}
    	}


    	public String getErrorTextSafe() { try { return getText(errorPanel);} catch(Exception e){ return ""; } }


    	public String getRightPanelText() { try { return getText(rightPanel);} catch(Exception e){ return ""; } }
    	
    	  // ðŸ”¹ New helper to check if confirmation contains payee name
        public boolean confirmationContainsPayee(String payee) {
            try {
                WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
                WebElement details = wait.until(ExpectedConditions.visibilityOfElementLocated(
                    By.xpath("//*[@id='rightPanel']//*[contains(normalize-space(),'Bill Payment to')]")
                ));
                return details.getText().toLowerCase().contains(payee.toLowerCase());
            } catch (Exception e) {
                return false;
            }
            
        }
        public String dumpConfirmationText() {
            try { return getRightPanelText(); } catch (Exception e) { return "(failed to read #rightPanel)"; }
        }
}*/

package com.parabank.pages;
import java.time.Duration;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.util.List;

public class BillPayPage extends BasePage {
    @FindBy(name="payee.name") private WebElement payeeName;
    @FindBy(name="payee.address.street") private WebElement payeeAddress;
    @FindBy(name="payee.address.city") private WebElement payeeCity;
    @FindBy(name="payee.address.state") private WebElement payeeState;
    @FindBy(name="payee.address.zipCode") private WebElement payeeZip;
    @FindBy(name="payee.phoneNumber") private WebElement payeePhone;
    @FindBy(name="payee.accountNumber") private WebElement payeeAccount;
    @FindBy(name="verifyAccount") private WebElement payeeVerify;
    @FindBy(name="amount") private WebElement amount;
    @FindBy(css="input[value='Send Payment']") private WebElement sendPayment;
    
    // Enhanced confirmation selectors
    @FindBy(css="#rightPanel .title") private WebElement confirmationTitle;
    @FindBy(css="#rightPanel .error") private WebElement errorPanel;
    @FindBy(css="#rightPanel") private WebElement rightPanel;
    @FindBy(xpath="//div[@id='rightPanel']//h1") private WebElement confirmationHeader;
    @FindBy(xpath="//div[@id='rightPanel']//p") private List confirmationParagraphs;
    @FindBy(xpath="//*[@id='rightPanel']/div/div/p") private List confirmationDetails;
    
    public BillPayPage(WebDriver driver){ 
        super(driver); 
        PageFactory.initElements(driver,this);
    }    

    public void fillPayee(String n,String a,String c,String s,String z,String p,String acc,String amt){
        type(payeeName,n); type(payeeAddress,a); type(payeeCity,c); type(payeeState,s); type(payeeZip,z);
        type(payeePhone,p); type(payeeAccount,acc); type(payeeVerify,acc); type(amount,amt);
    }
    
    public void submit(){ 
        click(sendPayment);
    }    
    
    public String getConfirmation(){ 
        return getText(confirmationTitle);
    }    
    
    public boolean hasValidationError(){ 
        try { 
            return errorPanel.isDisplayed(); 
        } catch(Exception e){ 
            return false; 
        } 
    }
    
    public String getFromAccountTextSafe() {
        try {
            Select s = new Select(driver.findElement(By.id("fromAccountId")));
            return s.getFirstSelectedOption().getText().trim();
        } catch (Exception e1) {
            try {
                Select s = new Select(driver.findElement(By.name("fromAccountId")));
                return s.getFirstSelectedOption().getText().trim();
            } catch (Exception e2) {
                return "";
            }
        }
    }
    
    public void clearAll() {
        try {
            payeeName.clear(); payeeAddress.clear(); payeeCity.clear(); payeeState.clear();
            payeeZip.clear(); payeePhone.clear(); payeeAccount.clear(); payeeVerify.clear(); amount.clear();
        } catch (Exception ignored) {}
    }

    public String getErrorTextSafe() { 
        try { 
            return getText(errorPanel);
        } catch(Exception e){ 
            return ""; 
        } 
    }

    public String getRightPanelText() { 
        try { 
            return getText(rightPanel);
        } catch(Exception e){ 
            return ""; 
        } 
    }
    
    // ðŸ”¹ Enhanced method to get full confirmation text with better waiting
    public String getFullConfirmationText() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(15));
            
            // Wait for either success confirmation or error
            wait.until(ExpectedConditions.or(
                ExpectedConditions.textToBePresentInElement(rightPanel, "Bill Payment Complete"),
                ExpectedConditions.textToBePresentInElement(rightPanel, "error"),
                ExpectedConditions.textToBePresentInElement(rightPanel, "required")
            ));
            
            return getText(rightPanel);
        } catch (Exception e) {
            System.err.println("Failed to get confirmation text: " + e.getMessage());
            return "";
        }
    }
    
    // ðŸ”¹ Enhanced method to check if confirmation contains payee name
    public boolean confirmationContainsPayee(String payee) {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(15));
            
            // Wait for confirmation to appear
            wait.until(ExpectedConditions.or(
                ExpectedConditions.textToBePresentInElement(rightPanel, "Bill Payment Complete"),
                ExpectedConditions.textToBePresentInElement(rightPanel, "Bill Payment to")
            ));
            
            String fullText = getFullConfirmationText();
            System.out.println("Full confirmation text: " + fullText);
            
            // Check multiple ways the payee name might appear
            String lowerFullText = fullText.toLowerCase();
            String lowerPayee = payee.toLowerCase();
            
            return lowerFullText.contains(lowerPayee) || 
                   lowerFullText.contains("bill payment to " + lowerPayee) ||
                   lowerFullText.contains("payment to " + lowerPayee);
                   
        } catch (Exception e) {
            System.err.println("Error checking payee in confirmation: " + e.getMessage());
            return false;
        }
    }
    
    // ðŸ”¹ Method to get confirmation details as separate lines
    public String[] getConfirmationDetails() {
        try {
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
            wait.until(ExpectedConditions.visibilityOf(rightPanel));
            
            String fullText = getText(rightPanel);
            return fullText.split("\\n");
        } catch (Exception e) {
            return new String[]{""};
        }
    }
    
    // ðŸ”¹ Method to check if payment was successful
    public boolean isPaymentSuccessful() {
        try {
            String confirmationText = getFullConfirmationText();
            return confirmationText.toLowerCase().contains("bill payment complete") ||
                   confirmationText.toLowerCase().contains("payment complete");
        } catch (Exception e) {
            return false;
        }
    }
    
    public String dumpConfirmationText() {
        try { 
            return getRightPanelText(); 
        } catch (Exception e) { 
            return "(failed to read #rightPanel)"; 
        }
    }
    
    // ðŸ”¹ Debug method to print all available text in right panel
    public void debugConfirmationElements() {
        try {
            System.out.println("=== DEBUG: Right Panel Elements ===");
            System.out.println("Right Panel Text: " + getRightPanelText());
            
            // Try to find all paragraphs in right panel
            List paragraphs = driver.findElements(By.xpath("//div[@id='rightPanel']//p"));
            for (int i = 0; i < paragraphs.size(); i++) {
                System.out.println("Paragraph " + i + ": " + paragraphs.get(i).getText());
            }
            
            // Try to find confirmation title
            try {
                WebElement title = driver.findElement(By.xpath("//div[@id='rightPanel']//h1"));
                System.out.println("Title: " + title.getText());
            } catch (Exception e) {
                System.out.println("No title found");
            }
            
            System.out.println("=== END DEBUG ===");
        } catch (Exception e) {
            System.err.println("Debug failed: " + e.getMessage());
        }
    }
}