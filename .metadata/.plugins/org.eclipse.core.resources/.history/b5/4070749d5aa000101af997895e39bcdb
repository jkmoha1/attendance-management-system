/*package com.parabank.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.Select;

public class BillPayPage extends BasePage {
    @FindBy(name="payee.name") private WebElement payeeName;
    @FindBy(name="payee.address.street") private WebElement payeeAddress;
    @FindBy(name="payee.address.city") private WebElement payeeCity;
    @FindBy(name="payee.address.state") private WebElement payeeState;
    @FindBy(name="payee.address.zipCode") private WebElement payeeZip;
    @FindBy(name="payee.phoneNumber") private WebElement payeePhone;
    @FindBy(name="payee.accountNumber") private WebElement payeeAccount;
    @FindBy(name="verifyAccount") private WebElement payeeVerify;
    @FindBy(name="amount") private WebElement amount;
    @FindBy(css="input[value='Send Payment']") private WebElement sendPayment;
    @FindBy(css="#rightPanel .title") private WebElement confirmationTitle;
    @FindBy(css="#rightPanel .error") private WebElement errorPanel;
    @FindBy(css="#rightPanel") private WebElement rightPanel;
    
    public BillPayPage(WebDriver driver){ super(driver); PageFactory.initElements(driver,this);}    

    public void fillPayee(String n,String a,String c,String s,String z,String p,String acc,String amt){
        type(payeeName,n); type(payeeAddress,a); type(payeeCity,c); type(payeeState,s); type(payeeZip,z);
        type(payeePhone,p); type(payeeAccount,acc); type(payeeVerify,acc); type(amount,amt);
    }
    public void submit(){ click(sendPayment);}    
    public String getConfirmation(){ return getText(confirmationTitle);}    
    public boolean hasValidationError(){ try { return errorPanel.isDisplayed(); } catch(Exception e){ return false; } }
    
    public String getFromAccountTextSafe() {
        try {
            Select s = new Select(driver.findElement(By.id("fromAccountId")));
            return s.getFirstSelectedOption().getText().trim();
        } catch (Exception e1) {
            try {
                Select s = new Select(driver.findElement(By.name("fromAccountId")));
                return s.getFirstSelectedOption().getText().trim();
            } catch (Exception e2) {
                return "";
            }
        }
    }
    public void clearAll() {
    	try {
    	payeeName.clear(); payeeAddress.clear(); payeeCity.clear(); payeeState.clear();
    	payeeZip.clear(); payeePhone.clear(); payeeAccount.clear(); payeeVerify.clear(); amount.clear();
    	} catch (Exception ignored) {}
    	}


    	public String getErrorTextSafe() { try { return getText(errorPanel);} catch(Exception e){ return ""; } }


    	public String getRightPanelText() { try { return getText(rightPanel);} catch(Exception e){ return ""; } }
    		
}*/
package com.parabank.pages;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class BillPayPage extends BasePage {
    @FindBy(name="payee.name") private WebElement payeeName;
    @FindBy(name="payee.address.street") private WebElement payeeAddress;
    @FindBy(name="payee.address.city") private WebElement payeeCity;
    @FindBy(name="payee.address.state") private WebElement payeeState;
    @FindBy(name="payee.address.zipCode") private WebElement payeeZip;
    @FindBy(name="payee.phoneNumber") private WebElement payeePhone;
    @FindBy(name="payee.accountNumber") private WebElement payeeAccount;
    @FindBy(name="verifyAccount") private WebElement payeeVerify;
    @FindBy(name="amount") private WebElement amount;
    @FindBy(css="input[value='Send Payment']") private WebElement sendPayment;
    @FindBy(css="#rightPanel .title") private WebElement confirmationTitle;
    @FindBy(css="#rightPanel .error") private WebElement errorPanel;
    @FindBy(css="#rightPanel") private WebElement rightPanel;

    public BillPayPage(WebDriver driver){ super(driver); PageFactory.initElements(driver,this); }

    public void fillPayee(String n,String a,String c,String s,String z,String p,String acc,String amt){
        type(payeeName,n); type(payeeAddress,a); type(payeeCity,c); type(payeeState,s); type(payeeZip,z);
        type(payeePhone,p); type(payeeAccount,acc); type(payeeVerify,acc); type(amount,amt);
    }

    /** Clicks Send and waits for the confirmation page to load (same tab). */
    public void submit(){
        String before = driver.getCurrentUrl();
        click(sendPayment);
        waitForNavigationOrConfirmation(before, Duration.ofSeconds(12));
    }

    public String getConfirmation(){ return getText(confirmationTitle); }
    public boolean hasValidationError(){ try { return errorPanel.isDisplayed(); } catch(Exception e){ return false; } }

    public String getFromAccountTextSafe() {
        try {
            Select s = new Select(driver.findElement(By.id("fromAccountId")));
            return s.getFirstSelectedOption().getText().trim();
        } catch (Exception e1) {
            try {
                Select s = new Select(driver.findElement(By.name("fromAccountId")));
                return s.getFirstSelectedOption().getText().trim();
            } catch (Exception e2) {
                return "";
            }
        }
    }

    public void clearAll() {
        try {
            payeeName.clear(); payeeAddress.clear(); payeeCity.clear(); payeeState.clear();
            payeeZip.clear(); payeePhone.clear(); payeeAccount.clear(); payeeVerify.clear(); amount.clear();
        } catch (Exception ignored) {}
    }

    public String getErrorTextSafe() { try { return getText(errorPanel);} catch(Exception e){ return ""; } }
    public String getRightPanelText() { try { return getText(rightPanel);} catch(Exception e){ return ""; } }

    /* ---------- New / improved waits and extractors ---------- */

    /** Waits until either URL changes, confirmation title appears, or an error panel appears. */
    private void waitForNavigationOrConfirmation(String oldUrl, Duration timeout) {
        WebDriverWait wait = new WebDriverWait(driver, timeout);

        // Checkers
        ExpectedCondition<Boolean> urlChanged =
                d -> d != null && !d.getCurrentUrl().equals(oldUrl);

        ExpectedCondition<Boolean> titleVisible =
                d -> {
                    try {
                        return confirmationTitle.isDisplayed();
                    } catch (Exception e) {
                        return false;
                    }
                };

        ExpectedCondition<Boolean> errorVisible =
                d -> {
                    try {
                        return errorPanel.isDisplayed();
                    } catch (Exception e) {
                        return false;
                    }
                };

        // Document ready
        ExpectedCondition<Boolean> domReady =
                d -> ((JavascriptExecutor)d).executeScript("return document.readyState").equals("complete");

        // Combined wait
        wait.until(d -> {
            boolean ready = false;
            try { ready = Boolean.TRUE.equals(domReady.apply(d)); } catch (Exception ignored) {}
            boolean any = false;
            try {
                any = Boolean.TRUE.equals(urlChanged.apply(d))
                   || Boolean.TRUE.equals(titleVisible.apply(d))
                   || Boolean.TRUE.equals(errorVisible.apply(d));
            } catch (Exception ignored) {}
            return ready && any;
        });
    }



    /** Wait for the confirmation title to be visible (after navigation). */
    public void waitForConfirmationVisible() {
        new WebDriverWait(driver, Duration.ofSeconds(12))
                .until(ExpectedConditions.visibilityOf(confirmationTitle));
    }

    /** Wait for the right panel to contain a snippet (useful for the payee name). */
    public String waitForPanelToContain(String snippet) {
        new WebDriverWait(driver, Duration.ofSeconds(12))
                .until(ExpectedConditions.textToBePresentInElement(rightPanel, snippet));
        return getRightPanelText();
    }

    /** Tries to read the Payee value specifically; falls back to the whole panel. */
    public String getConfirmedPayeeNameSafe() {
        try {
            // Case 1: table layout label -> value
            try {
                WebElement labelCell = driver.findElement(By.xpath(
                    "//*[@id='rightPanel']//td[normalize-space()='Payee' or normalize-space()='Payee Name']"
                ));
                WebElement valCell = labelCell.findElement(By.xpath("following-sibling::td[1]"));
                String val = valCell.getText().trim();
                if (!val.isBlank()) return val;
            } catch (Exception ignored) {}

            // Case 2: bold label "Payee Name:" followed by sibling
            WebElement sibling = driver.findElement(By.xpath(
                "//*[@id='rightPanel']//b[normalize-space()='Payee Name:']/following-sibling::*[1]"
            ));
            String val2 = sibling.getText().trim();
            if (!val2.isBlank()) return val2;

        } catch (Exception ignored) {}
        return getRightPanelText();
    }
}
