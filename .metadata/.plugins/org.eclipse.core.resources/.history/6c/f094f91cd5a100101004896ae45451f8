package com.company.attendance_management_system.service;

import com.company.attendance_management_system.exception.EmployeeNotFoundException;
import com.company.attendance_management_system.exception.InvalidAttendanceException;
import com.company.attendance_management_system.model.AttendanceRecord;
import com.company.attendance_management_system.model.Employee;
import com.company.attendance_management_system.repository.AttendanceRepository;
import com.company.attendance_management_system.repository.EmployeeRepository;
import org.testng.Assert;
import org.testng.annotations.*;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

@Test(groups = "attendance")
public class AttendanceServiceTest {

    private EmployeeRepository employeeRepository;
    private AttendanceRepository attendanceRepository;
    private AttendanceServiceImpl attendance;
    private EmployeeServiceImpl employees;

    @BeforeMethod
    public void setUp() throws Exception {
        employeeRepository = new EmployeeRepository();
        attendanceRepository = new AttendanceRepository();
        attendance = new AttendanceServiceImpl(employeeRepository, attendanceRepository);
        employees = new EmployeeServiceImpl(employeeRepository);
        employees.addEmployee(new Employee(10, "Test Emp", "testemp@example.com", "IT"));
    }

    @Test(priority = 1)
    public void clockIn_setsRecordForToday() throws Exception {
        AttendanceRecord rec = attendance.clockIn(10);
        Assert.assertNotNull(rec.getClockInTime(), "clock-in time");
        Assert.assertEquals(rec.getDate(), LocalDate.now());
    }

    @Test(priority = 2, dependsOnMethods = "clockIn_setsRecordForToday",
          expectedExceptions = InvalidAttendanceException.class,
          expectedExceptionsMessageRegExp = ".*Already clocked in.*")
    public void secondClockIn_sameDay_throws() throws Exception {
        attendance.clockIn(10);
    }

    @Test(priority = 3, expectedExceptions = InvalidAttendanceException.class,
          expectedExceptionsMessageRegExp = ".*No clock-in found.*")
    public void clockOut_withoutClockIn_throws() throws Exception {
        attendanceRepository.clear();
        attendance.clockOut(10);
    }

    @Test(priority = 4)
    public void clockIn_thenClockOut_setsHours() throws Exception {
        AttendanceRecord rec = attendance.clockIn(10);
        rec.setClockInTime(LocalDateTime.now().minusHours(2).truncatedTo(ChronoUnit.SECONDS));

        AttendanceRecord out = attendance.clockOut(10);
        Assert.assertNotNull(out.getClockOutTime(), "clock-out time");
        Assert.assertNotNull(out.getHoursWorked(), "hours");
        Assert.assertTrue(out.getHoursWorked() >= 1.99 && out.getHoursWorked() <= 2.01,
                "expected ~2.0, got " + out.getHoursWorked());
    }

    @Test(priority = 5, dependsOnMethods = "clockIn_thenClockOut_setsHours",
          expectedExceptions = InvalidAttendanceException.class,
          expectedExceptionsMessageRegExp = ".*Already clocked out.*")
    public void secondClockOut_sameDay_throws() throws Exception {
        attendance.clockOut(10);
    }

    @Test(priority = 6, expectedExceptions = EmployeeNotFoundException.class)
    public void clockIn_unknownEmployee_throws() throws Exception {
        attendance.clockIn(9999);
    }
}
