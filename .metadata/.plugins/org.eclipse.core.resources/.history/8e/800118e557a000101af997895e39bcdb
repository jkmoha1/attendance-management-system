/*package com.parabank.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.Select;

public class BillPayPage extends BasePage {
    @FindBy(name="payee.name") private WebElement payeeName;
    @FindBy(name="payee.address.street") private WebElement payeeAddress;
    @FindBy(name="payee.address.city") private WebElement payeeCity;
    @FindBy(name="payee.address.state") private WebElement payeeState;
    @FindBy(name="payee.address.zipCode") private WebElement payeeZip;
    @FindBy(name="payee.phoneNumber") private WebElement payeePhone;
    @FindBy(name="payee.accountNumber") private WebElement payeeAccount;
    @FindBy(name="verifyAccount") private WebElement payeeVerify;
    @FindBy(name="amount") private WebElement amount;
    @FindBy(css="input[value='Send Payment']") private WebElement sendPayment;
    @FindBy(css="#rightPanel .title") private WebElement confirmationTitle;
    @FindBy(css="#rightPanel .error") private WebElement errorPanel;
    @FindBy(css="#rightPanel") private WebElement rightPanel;
    
    public BillPayPage(WebDriver driver){ super(driver); PageFactory.initElements(driver,this);}    

    public void fillPayee(String n,String a,String c,String s,String z,String p,String acc,String amt){
        type(payeeName,n); type(payeeAddress,a); type(payeeCity,c); type(payeeState,s); type(payeeZip,z);
        type(payeePhone,p); type(payeeAccount,acc); type(payeeVerify,acc); type(amount,amt);
    }
    public void submit(){ click(sendPayment);}    
    public String getConfirmation(){ return getText(confirmationTitle);}    
    public boolean hasValidationError(){ try { return errorPanel.isDisplayed(); } catch(Exception e){ return false; } }
    
    public String getFromAccountTextSafe() {
        try {
            Select s = new Select(driver.findElement(By.id("fromAccountId")));
            return s.getFirstSelectedOption().getText().trim();
        } catch (Exception e1) {
            try {
                Select s = new Select(driver.findElement(By.name("fromAccountId")));
                return s.getFirstSelectedOption().getText().trim();
            } catch (Exception e2) {
                return "";
            }
        }
    }
    public void clearAll() {
    	try {
    	payeeName.clear(); payeeAddress.clear(); payeeCity.clear(); payeeState.clear();
    	payeeZip.clear(); payeePhone.clear(); payeeAccount.clear(); payeeVerify.clear(); amount.clear();
    	} catch (Exception ignored) {}
    	}


    	public String getErrorTextSafe() { try { return getText(errorPanel);} catch(Exception e){ return ""; } }


    	public String getRightPanelText() { try { return getText(rightPanel);} catch(Exception e){ return ""; } }
    	
    	
}*/
package com.parabank.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.Select;

public class BillPayPage extends BasePage {

    // === Inputs / Button (okay to cache before submit) ===
    @FindBy(name="payee.name")             private WebElement payeeName;
    @FindBy(name="payee.address.street")   private WebElement payeeAddress;
    @FindBy(name="payee.address.city")     private WebElement payeeCity;
    @FindBy(name="payee.address.state")    private WebElement payeeState;
    @FindBy(name="payee.address.zipCode")  private WebElement payeeZip;
    @FindBy(name="payee.phoneNumber")      private WebElement payeePhone;
    @FindBy(name="payee.accountNumber")    private WebElement payeeAccount;
    @FindBy(name="verifyAccount")          private WebElement payeeVerify;
    @FindBy(name="amount")                 private WebElement amount;
    @FindBy(css="input[value='Send Payment']") private WebElement sendPayment;

    // === Locators to re-find after navigation ===
    private static final By RIGHT_PANEL = By.cssSelector("#rightPanel");
    private static final By TITLE       = By.cssSelector("#rightPanel .title");
    private static final By ERROR_PANEL = By.cssSelector("#rightPanel .error");

    public BillPayPage(WebDriver driver){
        super(driver);
        PageFactory.initElements(driver,this);
    }

    public void fillPayee(String n,String a,String c,String s,String z,String p,String acc,String amt){
        type(payeeName,n);
        type(payeeAddress,a);
        type(payeeCity,c);
        type(payeeState,s);
        type(payeeZip,z);
        type(payeePhone,p);
        type(payeeAccount,acc);
        type(payeeVerify,acc);
        type(amount,amt);
    }

    public void submit(){ click(sendPayment); }

    public void clearAll() {
        try {
            payeeName.clear(); payeeAddress.clear(); payeeCity.clear(); payeeState.clear();
            payeeZip.clear();  payeePhone.clear();   payeeAccount.clear(); payeeVerify.clear(); amount.clear();
        } catch (Exception ignored) {}
    }

    // === Simple safe getters (re-find after reload) ===
    public String getRightPanelText() {
        try { return driver.findElement(RIGHT_PANEL).getText(); } catch (Exception e) { return ""; }
    }
    public String getConfirmationTitleText() {
        try { return driver.findElement(TITLE).getText(); } catch (Exception e) { return ""; }
    }
    public boolean hasValidationError(){
        try { return driver.findElement(ERROR_PANEL).isDisplayed(); } catch (Exception e){ return false; }
    }
    public String getErrorTextSafe(){
        try { return driver.findElement(ERROR_PANEL).getText(); } catch (Exception e){ return ""; }
    }
    public String getFromAccountTextSafe() {
        try {
            Select s = new Select(driver.findElement(By.id("fromAccountId")));
            return s.getFirstSelectedOption().getText().trim();
        } catch (Exception e1) {
            try {
                Select s = new Select(driver.findElement(By.name("fromAccountId")));
                return s.getFirstSelectedOption().getText().trim();
            } catch (Exception e2) {
                return "";
            }
        }
    }

    /** Backward-compatible helper */
    public String getConfirmation() { return getConfirmationTitleText(); }

    /**
     * Very simple loop to catch fast confirmation text after navigation.
     * Checks title, right panel, and (as fallback) page source.
     * Tries for about waitMillis total (e.g., 5000).
     */
    public String waitForConfirmationSimple(String payee, long waitMillis) {
        String payeeLower = payee == null ? "" : payee.toLowerCase();
        long end = System.currentTimeMillis() + waitMillis;
        String lastSeen = "";

        while (System.currentTimeMillis() < end) {
            String title = safeText(TITLE);
            String panel = safeText(RIGHT_PANEL);
            String combined = panel.isBlank() ? title : panel;
            lastSeen = combined.isBlank() ? lastSeen : combined;

            String lower = combined.toLowerCase();
            if (!payeeLower.isEmpty() && lower.contains(payeeLower)) return combined;
            if (lower.contains("bill payment complete")) return combined;

            // fallback: check raw page source in case it flashes quickly
            try {
                String srcLower = driver.getPageSource().toLowerCase();
                if ((!payeeLower.isEmpty() && srcLower.contains(payeeLower)) || srcLower.contains("bill payment complete")) {
                    return combined.isBlank() ? "(matched in page source)" : combined;
                }
            } catch (Exception ignored) {}

            try { Thread.sleep(200); } catch (InterruptedException ignored) {}
        }
        return lastSeen; // whatever we last saw (helps in assert message)
    }

    // small helper
    private String safeText(By loc) {
        try { return driver.findElement(loc).getText().trim(); } catch (Exception e) { return ""; }
    }
}

