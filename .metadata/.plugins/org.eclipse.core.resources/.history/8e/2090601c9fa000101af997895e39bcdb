/*package com.parabank.listeners;

import com.parabank.managers.DriverManager;
import com.parabank.utils.ConfigReader;
import org.openqa.selenium.*;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

public class TestListener implements ITestListener {

    private Logger logger;

    @Override
    public void onStart(ITestContext context) {
        cleanDir("screenshots");
        cleanDir("logs");
        initLogger();
        logInfo("Suite started: " + context.getName());
        System.out.println("Starting Test Suite: " + context.getName());
    }

    @Override
    public void onFinish(ITestContext context) {
        logInfo("Suite finished: " + context.getName());
        System.out.println("Finished Test Suite: " + context.getName());
    }

    @Override
    public void onTestStart(ITestResult result) {
        logInfo("Starting Test: " + result.getName());
        System.out.println("Starting Test: " + result.getName());
    }

    @Override
    public void onTestSuccess(ITestResult result) {
        logInfo("Test Passed: " + result.getName());
        System.out.println("Test Passed: " + result.getName());
    }

    @Override
    public void onTestFailure(ITestResult result) {
        logSevere("Test Failed: " + result.getName() + " - " + safeMsg(result.getThrowable()));
        System.out.println("Test Failed: " + result.getName());
        takeScreenshot(result.getName());
    }

    @Override
    public void onTestSkipped(ITestResult result) {
        logInfo("Test Skipped: " + result.getName());
        System.out.println("Test Skipped: " + result.getName());
    }

    private void takeScreenshot(String testName) {
        WebDriver driver;
        try {
            driver = DriverManager.getDriver();
        } catch (IllegalStateException e) {
            logWarn("Driver not initialized, skipping screenshot for: " + testName);
            System.out.println("Driver not initialized, skipping screenshot for: " + testName);
            return;
        }

        try {
            if (driver instanceof HasCapabilities) {
                if (((HasCapabilities) driver).getCapabilities() == null) {
                    logWarn("Driver capabilities not available, skipping screenshot for: " + testName);
                    System.out.println("Driver capabilities not available, skipping screenshot for: " + testName);
                    return;
                }
            }
        } catch (Throwable ignored) {}

        try {
            File srcFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            String baseDir = ConfigReader.get("screenshot.path");
            if (baseDir == null || baseDir.isBlank()) baseDir = "screenshots";
            ensureDir(baseDir);

            String ts = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
            File destFile = new File(baseDir + File.separator + testName + "_" + ts + ".png");
            Files.copy(srcFile.toPath(), destFile.toPath(), StandardCopyOption.REPLACE_EXISTING);

            String msg = "Screenshot saved at: " + destFile.getAbsolutePath();
            logInfo(msg);
            System.out.println(msg);
        } catch (WebDriverException wde) {
            String msg = "Could not capture screenshot (session may be gone): " + wde.getClass().getSimpleName();
            logWarn(msg);
            System.out.println(msg);
        } catch (IOException ioe) {
            logSevere("IOException saving screenshot: " + ioe.getMessage());
            ioe.printStackTrace();
        } catch (Throwable t) {
            String msg = "Unexpected error taking screenshot: " + t.getMessage();
            logSevere(msg);
            System.out.println(msg);
        }
    }

    private void initLogger() {
        try {
            String logsDir = "logs";
            ensureDir(logsDir);

            logger = Logger.getLogger("RunLogger");
            logger.setUseParentHandlers(false);
            for (var h : logger.getHandlers()) logger.removeHandler(h);

            FileHandler fh = new FileHandler(logsDir + File.separator + "execution.log", false);
            fh.setFormatter(new SimpleFormatter());
            logger.addHandler(fh);
        } catch (IOException e) {
            System.out.println("Could not create log file: " + e.getMessage());
        }
    }

    private void cleanDir(String dir) {
        try {
            Path path = Path.of(dir);
            if (Files.exists(path)) {
                Files.walk(path)
                        .sorted((a, b) -> b.compareTo(a))
                        .forEach(p -> { try { Files.deleteIfExists(p); } catch (Exception ignored) {} });
            }
            Files.createDirectories(path);
        } catch (Exception ignored) {}
    }

    private void ensureDir(String dir) {
        try { Files.createDirectories(Path.of(dir)); } catch (Exception ignored) {}
    }

    private void logInfo(String m)   { if (logger != null) logger.info(m); }
    private void logWarn(String m)   { if (logger != null) logger.warning(m); }
    private void logSevere(String m) { if (logger != null) logger.severe(m); }
    private String safeMsg(Throwable t) { return t == null ? "" : t.getMessage(); }
}*/

package com.parabank.listeners;

import com.parabank.managers.DriverManager;
import com.parabank.utils.ConfigReader;
import org.openqa.selenium.*;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class TestListener implements ITestListener {

    private String screenshotsDir;  // e.g. "screenshots" or from config
    private String logsDir;         // e.g. "logs" or from config
    private String reportsDir;      // always "test-output" unless overridden

    @Override
    public void onStart(ITestContext context) {
        // Read from config if present, else use simple defaults
        screenshotsDir = nz(ConfigReader.get("screenshot.path"), "screenshots");
        logsDir        = nz(ConfigReader.get("logs.path"),        "logs");
        reportsDir     = nz(ConfigReader.get("reports.path"),     "test-output"); // keep the guideline name

        // Fresh screenshots + make logs/reports folders
        cleanDir(screenshotsDir);
        ensureDir(logsDir);
        ensureDir(reportsDir);

        log("Starting Test Suite: " + context.getName());
    }

    @Override
    public void onFinish(ITestContext context) {
        log("Finished Test Suite: " + context.getName());

        // Mirror whatever TestNG produced into ./test-output (or configured reportsDir)
        // - If you run with Maven Surefire, TestNG output may be elsewhere; this copies it here.
        try {
            Path src = Path.of(context.getOutputDirectory()); // TestNG's real output dir
            Path dest = Path.of(reportsDir);
            mirrorDirectory(src, dest);
            log("Reports available in: " + dest.toAbsolutePath());
        } catch (Exception e) {
            log("Could not mirror TestNG reports: " + e.getMessage());
        }
    }

    @Override
    public void onTestStart(ITestResult result) {
        log("Starting Test: " + result.getName());
    }

    @Override
    public void onTestSuccess(ITestResult result) {
        log("Test Passed: " + result.getName());
    }

    @Override
    public void onTestFailure(ITestResult result) {
        log("Test Failed: " + result.getName() + " - " + safeMsg(result.getThrowable()));
        takeFailureScreenshot(result.getName());
    }

    @Override
    public void onTestSkipped(ITestResult result) {
        log("Test Skipped: " + result.getName());
    }

    // ---------------- helpers ----------------

    private void takeFailureScreenshot(String testName) {
        WebDriver driver;
        try {
            driver = DriverManager.getDriver();
        } catch (IllegalStateException e) {
            log("Driver not initialized, skipping screenshot for: " + testName);
            return;
        }

        try {
            File srcFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            String ts = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
            File destFile = new File(screenshotsDir + File.separator + testName + "_FAIL_" + ts + ".png");

            ensureDir(destFile.getParentFile().getPath());
            Files.copy(srcFile.toPath(), destFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
            log("Screenshot saved at: " + destFile.getAbsolutePath());
        } catch (WebDriverException wde) {
            log("Could not capture screenshot: " + wde.getClass().getSimpleName());
        } catch (IOException ioe) {
            log("IO error saving screenshot: " + ioe.getMessage());
        } catch (Throwable t) {
            log("Unexpected screenshot error: " + t.getMessage());
        }
    }

    private void mirrorDirectory(Path src, Path dest) throws IOException {
        if (src == null || !Files.exists(src)) return;
        ensureDir(dest.toString());
        Files.walk(src).forEach(from -> {
            try {
                Path to = dest.resolve(src.relativize(from).toString());
                if (Files.isDirectory(from)) {
                    Files.createDirectories(to);
                } else {
                    Files.copy(from, to, StandardCopyOption.REPLACE_EXISTING);
                }
            } catch (IOException ignored) {}
        });
    }

    private void cleanDir(String dir) {
        try {
            Path path = Path.of(dir);
            if (Files.exists(path)) {
                Files.walk(path)
                        .sorted((a, b) -> b.compareTo(a)) // files first
                        .forEach(p -> { try { Files.deleteIfExists(p); } catch (Exception ignored) {} });
            }
            Files.createDirectories(path);
        } catch (Exception ignored) {}
    }

    private void ensureDir(String dir) {
        try { Files.createDirectories(Path.of(dir)); } catch (Exception ignored) {}
    }

    private void log(String msg) {
        System.out.println(msg);
        try {
            Path logFile = Path.of(logsDir, "execution.log");
            Files.createDirectories(logFile.getParent());
            String line = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
                    + "  " + msg + System.lineSeparator();
            Files.writeString(logFile, line, StandardOpenOption.CREATE, StandardOpenOption.APPEND);
        } catch (IOException ignored) {}
    }

    private String safeMsg(Throwable t) { return t == null ? "" : t.getMessage(); }
    private String nz(String v, String def) { return (v == null || v.isBlank()) ? def : v.trim(); }
}



